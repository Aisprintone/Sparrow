name: Deploy All Services

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/python_engine/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Test Frontend
        run: |
          cd frontend
          npm ci
          npm run lint
          npm test -- --passWithNoTests --coverage
          
      - name: Test Cloudflare Workers
        run: |
          cd cloudflare-workers/financeai-backend
          npm ci
          npm test -- --passWithNoTests
          
      - name: Test Python Backend
        run: |
          cd backend/python_engine
          pip install -r requirements.txt
          python -c "import api.main; print('‚úÖ Backend modules loaded successfully')"

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NODE_ENV: production
          
      - name: Verify build output
        run: |
          cd frontend
          if [ ! -d "out" ]; then
            echo "‚ùå Build output directory 'out' not found"
            exit 1
          fi
          echo "‚úÖ Build output verified"
          ls -la out/
          
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './frontend/out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "üöÄ Deploy from GitHub Actions - $(date)"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cloudflare-workers/financeai-backend/package-lock.json
          
      - name: Install Cloudflare Workers dependencies
        run: |
          cd cloudflare-workers/financeai-backend
          npm ci
          
      - name: Build Cloudflare Workers
        run: |
          cd cloudflare-workers/financeai-backend
          npm run build
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Deploy to Cloudflare Workers
        run: |
          cd cloudflare-workers/financeai-backend
          npx wrangler deploy --compatibility-date 2025-01-01
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Verify deployment
        run: |
          echo "‚úÖ Cloudflare Workers deployment completed"
          echo "üîó Workers URL: https://sparrow-backend.your-subdomain.workers.dev"

  deploy-python-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/python_engine/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Python dependencies
        run: |
          cd backend/python_engine
          pip install -r requirements.txt
          
      - name: Test Python backend
        run: |
          cd backend/python_engine
          python -c "import api.main; print('‚úÖ Python backend modules loaded successfully')"
        env:
          PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
          PLAID_CLIENT_SECRET: ${{ secrets.PLAID_CLIENT_SECRET }}
          CHASE_API_KEY: ${{ secrets.CHASE_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  notify:
    needs: [deploy-frontend, deploy-backend, deploy-python-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check deployment status
        run: |
          echo "üìä Deployment Status Report"
          echo "=========================="
          echo "Frontend (Netlify): ${{ needs.deploy-frontend.result }}"
          echo "Backend (Cloudflare): ${{ needs.deploy-backend.result }}"
          echo "Python Backend: ${{ needs.deploy-python-backend.result }}"
          
          if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-python-backend.result }}" == "success" ]; then
            echo "‚úÖ All deployments successful!"
            echo "üåê Frontend: https://your-netlify-site.netlify.app"
            echo "üîó Backend: https://sparrow-backend.your-subdomain.workers.dev"
          else
            echo "‚ùå Some deployments failed"
            exit 1
          fi
          
      - name: Create deployment summary
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Deployment Status')
            );
            
            const summary = `## üöÄ Deployment Status
            
            | Service | Status |
            |--------|--------|
            | Frontend (Netlify) | ${{ needs.deploy-frontend.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |
            | Backend (Cloudflare) | ${{ needs.deploy-backend.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |
            | Python Backend | ${{ needs.deploy-python-backend.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |
            
            **Deployment completed at:** ${new Date().toISOString()}
            **Commit:** ${context.sha}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
